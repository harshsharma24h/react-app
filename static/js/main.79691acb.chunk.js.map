{"version":3,"sources":["components/Navbar.js","components/textForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","href","title","type","id","about","placeholder","prototype","PropTypes","string","TextForm","useState","Text","setText","heading","value","onChange","event","console","log","target","rows","onClick","newText","toUpperCase","toLowerCase","replace","split","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOASe,SAASA,EAAOC,GAC3B,OACI,8BACI,qBAAKC,UAAU,gDAAf,SACV,sBAAKA,UAAU,kBAAf,UAEE,mBAAGA,UAAU,eAAeC,KAAK,IAAjC,SAAsCF,EAAMG,QAC5C,wBAAQF,UAAU,iBAAiBG,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMH,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BI,GAAG,yBAA7C,UACE,oBAAIJ,UAAU,kCAAd,SAEE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,WAAWC,KAAK,IAA7B,SAAkCF,EAAMM,YAK5C,uBAAML,UAAU,SAAhB,UACE,uBAAOA,UAAU,oBAAoBG,KAAK,SAASG,YAAY,SAAS,aAAW,WACnF,wBAAQN,UAAU,0BAA0BG,KAAK,SAAjD,iCAURL,EAAOS,UAAU,CAACL,MAAMM,IAAUC,OACdJ,MAAMG,IAAUC,Q,WCjCrB,SAASC,EAASX,GAE/B,MAAwBY,mBAAS,mBAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA2CA,OACE,qCACE,sBAAKb,UAAU,YAAf,UAEE,oBAAIA,UAAU,OAAd,SAAsBD,EAAMe,UAC5B,qBAAKd,UAAU,YAAf,SACE,0BAAUA,UAAU,eAAee,MAAOH,EAAMI,SAdlC,SAACC,GAErBC,QAAQC,IAAI,aACZN,EAAQI,EAAMG,OAAOL,QAW0DX,GAAG,QAAQiB,KAAK,QAM3F,wBAAQrB,UAAU,mBAAmBsB,QA5CxB,WACjBJ,QAAQC,IAAI,YAAcP,GAC1B,IAAIW,EAAUX,EAAKY,cACnBX,EAAQU,IAyCJ,kCACA,wBAAQvB,UAAU,uBAAuBsB,QAvC5B,WACjBJ,QAAQC,IAAI,YAAcP,GAC1B,IAAIW,EAAUX,EAAKa,cACnBZ,EAAQU,IAoCJ,kCACA,wBAAQvB,UAAU,kBAAkBsB,QAlCvB,WACjBJ,QAAQC,IAAI,YAAcP,GAC1B,IAAIW,EAAUX,EAAKc,QAAQ,IAAI,IAC/Bb,EAAQU,IA+BJ,wBACA,wBAAQvB,UAAU,wBAAwBsB,QA9BlC,WACZJ,QAAQC,IAAI,YAAcP,GAG1BC,EADQ,KA2BJ,sBAGF,sBAAKb,UAAU,aAAf,UACE,mDACA,8BAAIY,EAAKe,MAAM,KAAKC,OAApB,WAAoChB,EAAKgB,OAAzC,gBACA,8BAAI,GAAIhB,EAAKe,MAAM,KAAKC,OAAxB,4BACA,yCACA,4BAAIhB,UCnDGiB,MAnBf,WACE,OACE,qCAGE,cAAC/B,EAAD,CAAQI,MAAM,WAAWG,MAAM,mBAG/B,qBAAKL,UAAU,YAAf,SAEE,cAACU,EAAD,CAAUI,QAAQ,0BCJXgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.79691acb.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n// this is a component which we set in our app\r\n\r\n\r\n\r\n// we use props in Navbar \r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n  <div className=\"container-fluid\">\r\n      {/* this is the sintex or prpos */}\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n      \r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/\">{props.about}</a>\r\n        </li>\r\n       \r\n        \r\n      </ul>\r\n      <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n// this is the sintex of prop type but first we have import the proptype libarry\r\nNavbar.prototype={title:PropTypes.string,\r\n                    about:PropTypes.string }","import React, { useState } from 'react'// we import react {useState} //useState is a use full component that we\r\n// we use to update the value of a veriable that we use in program because react not allow to update the \r\n// value derictly os it is must to learn this blow line \"for more search on goole\"\r\n\r\n\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n  // this is the magical line\r\n  const [Text, setText] = useState(\"Enter text here\");\r\n\r\n  // note! \r\n  // text=\"is the veriable\"\r\n  // setText=\"is the function which is use to update the value of text veriablr\"\r\n\r\n  // text=\"something\"//this not allowed\r\n  // we have to use this way\r\n\r\n  // setText(\"some thing\")//this is correct\r\n\r\n  const clickUpper = () => {\r\n    console.log(\"click hua\" + Text)\r\n    let newText = Text.toUpperCase()\r\n    setText(newText);\r\n  }\r\n\r\n  const clickLower = () => {\r\n    console.log(\"click hua\" + Text)\r\n    let newText = Text.toLowerCase()\r\n    setText(newText);\r\n  }\r\n\r\n  const clearSpace = () => {\r\n    console.log(\"click hua\" + Text)\r\n    let newText = Text.replace(\" \",\"\")\r\n    setText(newText);\r\n  }\r\n  const clear = () => {\r\n    console.log(\"click hua\" + Text)\r\n    let newText = Text\r\n    newText=\"\"\r\n    setText(newText);\r\n  }\r\n\r\n  const handeOnChange = (event) => {\r\n\r\n    console.log(\"on change\")\r\n    setText(event.target.value)\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className='container'>\r\n\r\n        <h1 className='my-2'>{props.heading}</h1>\r\n        <div className=\"mb-3 my-3\">\r\n          <textarea className=\"form-control\" value={Text} onChange={handeOnChange} id=\"mybox\" rows=\"8\"></textarea>\r\n          {/* here on text are we must have to use onChange event to chane the value it is compalsary */}\r\n          {/* other wise it will give u error soo */}\r\n          {/* and the best thing is that when we use this event we get an complementry variable=\"event\" */}\r\n          {/* that we use on above onChange function  */}\r\n        </div>\r\n        <button className='btn btn-primary ' onClick={clickUpper}>Convert To Uppercase</button>\r\n        <button className='btn btn-primary mx-2' onClick={clickLower}>Convert To Uppercase</button>\r\n        <button className='btn btn-primary' onClick={clearSpace}>Clearspace</button>\r\n        <button className='btn btn-warning mx-2 ' onClick={clear}>Clear</button>\r\n      </div>\r\n\r\n      <div className='container '>\r\n        <h1>your text summery</h1>\r\n        <p>{Text.split(\" \").length}: words {Text.length}: elements</p>\r\n        <p>{0.2*Text.split(\" \").length}: minutes to read this</p>\r\n        <h3>preview</h3>\r\n        <p>{Text}</p>\r\n        \r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/textForm';\n\n\nfunction App() {\n  return (\n    <>\n      {/* this is a component that which we import from components folder  */}\n      {/* we set porps in the this navbar to set titel and ther elements */}\n      <Navbar title=\"Hcompany\" about=\"set pages name\" />\n\n      {/* this is text area which we used from bootstrap */}\n      <div className='container'>\n        {/* we use the className=\"container\" to give good look for more search on google */}\n        <TextForm heading=\"FIRST React app\"/>\n      </div>\n\n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}